//exercicio1
/*#include <stdio.h>

int main() {
 int A[6] = {1,0,5,2,5,7};
 int soma = A[0] + A[1] + A[5];
 printf("A soma das das posicoes e igual a %d\n", soma);
 A[4]= 100;

 for(int i = 0; i < 6; i++){
   printf("Os valores do vetor sao: %d\n", A[i]);
 }
 return 0;
  
}
*/

//exercicio2
/*
int main(){
  int x = 0;
  int y = 0;
  int vet[8];

  for(i = 0; i < 8; i++){
    printf("Qual o valor da posicao %d\n",i);
    scanf("%d",&vet[8]);
  }
}

  printf("Digite as posiçoes de X e Y:\n");
  scanf("%d %d", &x, &y);

  if (x >= 0 && x < 8 && y >= 0 && y < 8) {
    
        int soma = vet[x] + vet[y];

        printf("A soma dos valores nas posições %d e %d é: %d\n", x, y, soma);
    } else {
        printf("As posições X e Y informadas estão fora dos limites válidos.\n");
    }

    return 0;
}
*/

//exercicio 3 
/*
#include <stdio.h>

int main() {
    int valores[6];

    printf("Digite 6 valores inteiros:\n");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &valores[i]);
    }

    printf("Valores na ordem inversa:\n");
    for (int i = 5; i >= 0; i--) {
        printf("%d\n", valores[i]);
    }

    return 0;
}
*/

//exercicio 4
/*
#include <stdio.h>

int main() {
    int valores[5];
    int maior, menor;
    int posicao_maior, posicao_menor;

    printf("Digite 5 valores inteiros:\n");
    for (int i = 0; i < 5; i++) {
        scanf("%d", &valores[i]);
    }

    maior = valores[0];
    menor = valores[0];
    posicao_maior = 0;
    posicao_menor = 0;

    for (int i = 1; i < 5; i++) {
        if (valores[i] > maior) {
            maior = valores[i];
            posicao_maior = i;
        }
        if (valores[i] < menor) {
            menor = valores[i];
            posicao_menor = i;
        }
    }

    printf("Posição do maior valor: %d\n", posicao_maior);
    printf("Posição do menor valor: %d\n", posicao_menor);

    return 0;
}
*/

//exercicio 5
/*
#include <stdio.h>

int main() {
    int vetor[50];

    // Preenche o vetor com os valores (i+5*i)%(i+1)
    for (int i = 0; i < 50; i++) {
        vetor[i] = (i + 5 * i) % (i + 1);
    }

    printf("Vetor:\n");
    for (int i = 0; i < 50; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    return 0;
}
*/
//exercicio 6
/*
#include <stdio.h>

int primo(int num) {
    if (num <= 1) {
        return 0;
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    return 1;
}

int main() {
    int numeros[10];

    printf("Digite 10 numeros inteiros:\n");
    for (int i = 0; i < 10; i++) {
        scanf("%d", &numeros[i]);
    }

    printf("Numeros primos encontrados:\n");
    for (int i = 0; i < 10; i++) {
        if (primo(numeros[i])) {
            printf("Posicao %d: %d\n", i, numeros[i]);
        }
    }

    return 0;
}
*/
//exercicio 7
/*
#include <stdio.h>

int main() {
    int numeros[6];
    int pares[6], impares[6];
    int somaPares = 0;
    int qtdImpares = 0;

    printf("Digite 6 numeros inteiros:\n");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &numeros[i]);

        if (numeros[i] % 2 == 0) {
            pares[i] = numeros[i];
            somaPares += numeros[i];
        } else {
            impares[qtdImpares] = numeros[i];
            qtdImpares++;
        }
    }

    printf("Numeros pares digitados:\n");
    for (int i = 0; i < 6; i++) {
        if (pares[i] != 0) {
            printf("%d ", pares[i]);
        }
    }
    printf("\n");
    printf("Soma dos numeros pares: %d\n", somaPares);

    printf("Numeros impares digitados:\n");
    for (int i = 0; i < qtdImpares; i++) {
        printf("%d ", impares[i]);
    }
    printf("\n");
    printf("Quantidade de numeros impares: %d\n", qtdImpares);

    return 0;
}
*/
//exercicio 8
/*
#include <stdio.h>

int main() {
    int numeros[10];
    int i, j, duplicado;

    printf("Digite 10 números diferentes:\n");

    for (i = 0; i < 10; i++) {
        do {
            duplicado = 0;
            scanf("%d", &numeros[i]);

            // Verifica se o número já foi digitado anteriormente
            for (j = 0; j < i; j++) {
                if (numeros[i] == numeros[j]) {
                    duplicado = 1;
                    printf("Número já foi digitado. \nDigite outro número: ");
                    break;
                }
            }
        } while (duplicado);
    }

    printf("Vetor final:\n");
    for (i = 0; i < 10; i++) {
        printf("%d ", numeros[i]);
    }
    printf("\n");

    return 0;
}
*/

//------------------MATRIZES-----------------------------------------

//exercicio 1
/*
  #include <stdio.h>

int main() {
    int matriz[4][4];
    int contador = 0;

    printf("Digite os elementos da matriz 4x4:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &matriz[i][j]);
            
            if (matriz[i][j] > 10) {
                contador++;
            }
        }
    }

    printf("A matriz possui %d valores maiores que 10.\n", contador);

    return 0;
}
*/

//exercicio 2
/*
#include <stdio.h>

int main() {
    int matriz[5][5];

    // 1 na diagonal principal e 0 nos demais elementos
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (i == j) {
                matriz[i][j] = 1;
            } else {
                matriz[i][j] = 0;
            }
        }
    }

    // Imprime a matriz resultante
    printf("Matriz resultante:\n");
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 3
/*
#include <stdio.h>

int main() {
    int matriz[4][4];
    int maiorValor = 0;
    int linhaMaior, colunaMaior;

    printf("Digite os elementos da matriz 4x4:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &matriz[i][j]);

            // Verifica se o elemento atual é maior que o maior valor encontrado até o momento
            if (matriz[i][j] > maiorValor) {
                maiorValor = matriz[i][j];
                linhaMaior = i;
                colunaMaior = j;
            }
        }
    }

    printf("\nMatriz:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    printf("\nO maior valor da matriz é %d, localizado na linha %d e coluna %d.\n", maiorValor, linhaMaior, colunaMaior);

    return 0;
}
*/
//exercicio 4
/*
#include <stdio.h>

int main() {
    int matriz[5][5];
    int valor;
    int encontrado = 0;
    int linhaEncontrada, colunaEncontrada;

    printf("Digite os elementos da matriz 5x5:\n");
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }

    printf("Digite um valor para buscar na matriz: ");
    scanf("%d", &valor);

    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (matriz[i][j] == valor) {
                encontrado = 1;
                linhaEncontrada = i;
                colunaEncontrada = j;
                break;
            }
        }
    }

    if (encontrado) {
        printf("O valor %d foi encontrado na linha %d e coluna %d da matriz.\n", valor, linhaEncontrada, colunaEncontrada);
    } else {
        printf("O valor %d não foi encontrado na matriz.\n", valor);
    }

    return 0;
}
*/

//exercicio 5
/*
#include <stdio.h>

int main() {
    int matriz[10][10];

    printf("Matriz gerada:\n");
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (i < j) {
                matriz[i][j] = 2 * i + 7 * j - 2;
            } else if (i == j) {
                matriz[i][j] = 3 * i * i - 1;
            } else {
                matriz[i][j] = 4 * i * i * i - 5 * j * j + 1;
            }
            printf("%4d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 6
/*
#include <stdio.h>

int main() {
    int vetor[50];
    int i;

    for (i = 0; i < 50; i++) {
        vetor[i] = (i + 5*i) % (i + 1);
    }

    printf("Vetor: ");
    for (i = 0; i < 50; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    return 0;
}
*/

//exercicio 7
/*
#include <stdio.h>

int e_primo(int num) {
    if (num < 2)
        return 0;

    int i;
    for (i = 2; i <= num / 2; i++) {
        if (num % i == 0)
            return 0;
    }

    return 1;
}

int main() {
    int vetor[10];
    int i;

    for (i = 0; i < 10; i++) {
        printf("Digite um número inteiro: ");
        scanf("%d", &vetor[i]);
    }

    printf("Números primos e suas posições:\n");
    for (i = 0; i < 10; i++) {
        if (e_primo(vetor[i])) {
            printf("Número: %d | Posição: %d\n", vetor[i], i);
        }
    }

    return 0;
}
*/

//exercicio 8
/*
#include <stdio.h>

int main() {
    int numeros[6];
    int i;
    int soma_pares = 0;
    int quantidade_impares = 0;

    for (i = 0; i < 6; i++) {
        printf("Digite um número inteiro: ");
        scanf("%d", &numeros[i]);

        if (numeros[i] % 2 == 0) {
            printf("Número par digitado: %d\n", numeros[i]);
            soma_pares += numeros[i];
        } else {
            printf("Número ímpar digitado: %d\n", numeros[i]);
            quantidade_impares++;
        }
    }

    printf("Soma dos números pares: %d\n", soma_pares);
    printf("Quantidade de números ímpares: %d\n", quantidade_impares);

    return 0;
}
*/
//-------------------------------------------------
//exercicio 1 MATRIZES
/*
#include <stdio.h>

int main() {
    int matriz[4][4];
    int contador = 0;

    // Ler a matriz 4x4
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("Digite o valor para a posição [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);

            if (matriz[i][j] > 10) {
                contador++;
            }
        }
    }

    printf("A matriz possui %d valores maiores que 10.\n", contador);

    return 0;
}
*/

//exercicio 2
/*
#include <stdio.h>

int main() {
    int matriz[5][5];

    // Preencher matriz com 1 na diagonal principal e 0 nos demais elementos
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (i == j) {
                matriz[i][j] = 1;
            } else {
                matriz[i][j] = 0;
            }
        }
    }

    // Imprimir matriz obtida
    printf("Matriz obtida:\n");
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 3
/*
#include <stdio.h>

int main() {
    int matriz[4][4];
    int maiorValor = 0;
    int linhaMaior, colunaMaior;

    // Ler a matriz 4x4
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("Digite o valor para a posição [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);

            if (matriz[i][j] > maiorValor) {
                maiorValor = matriz[i][j];
                linhaMaior = i;
                colunaMaior = j;
            }
        }
    }

    // Imprimir a matriz
    printf("Matriz:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    // Imprimir a localização do maior valor
    printf("O maior valor está na posição [%d][%d].\n", linhaMaior, colunaMaior);

    return 0;
}
*/

//exercicio 4
/*
#include <stdio.h>

int main() {
    int matriz[5][5];
    int valorProcurado;
    int linhaEncontrada = -1, colunaEncontrada = -1;

    // Ler a matriz 5x5
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            printf("Digite o valor para a posição [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);
        }
    }

    // Ler o valor a ser procurado
    printf("Digite o valor a ser procurado: ");
    scanf("%d", &valorProcurado);

    // Buscar o valor na matriz
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (matriz[i][j] == valorProcurado) {
                linhaEncontrada = i;
                colunaEncontrada = j;
                break;
            }
        }
    }

    // Verificar se o valor foi encontrado e exibir a localização
    if (linhaEncontrada != -1 && colunaEncontrada != -1) {
        printf("O valor %d foi encontrado na posição [%d][%d].\n", valorProcurado, linhaEncontrada, colunaEncontrada);
    } else {
        printf("O valor %d não foi encontrado na matriz.\n", valorProcurado);
    }

    return 0;
}
*/

//exercicio 5
/*
#include <stdio.h>

#define SIZE 10

int main() {
    int matriz[SIZE][SIZE];

    // Preencher a matriz com os valores conforme a condição
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (i < j) {
                matriz[i][j] = 2 * i + 7 * j - 2;
            } else if (i == j) {
                matriz[i][j] = 3 * i * i - 1;
            } else {
                matriz[i][j] = 4 * i * i * i - 5 * j * j + 1;
            }
        }
    }

    // Imprimir a matriz
    printf("Matriz:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 6
/*
#include <stdio.h>

#define SIZE 4

int main() {
    int matriz[SIZE][SIZE];

    // Gerar matriz com valores no intervalo [1, 20]
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            matriz[i][j] = rand() % 20 + 1;
        }
    }

    // Imprimir matriz original
    printf("Matriz original:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    // Transformar matriz em matriz triangular inferior
    for (int i = 0; i < SIZE; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            matriz[i][j] = 0;
        }
    }

    // Imprimir matriz transformada
    printf("\nMatriz transformada:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 7
/*
#include <stdio.h>

#define SIZE 10

int main() {
    int matriz[SIZE][SIZE];

    // Preencher a matriz com os valores conforme a condição
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (i < j) {
                matriz[i][j] = 2 * i + 7 * j - 2;
            } else if (i == j) {
                matriz[i][j] = 3 * i * i - 1;
            } else {
                matriz[i][j] = 4 * i * i * i - 5 * j * j + 1;
            }
        }
    }

    // Imprimir a matriz
    printf("Matriz:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//exercicio 8
/*
#include <stdio.h>

#define SIZE 4

int main() {
    int matriz[SIZE][SIZE];

    // Gerar matriz com valores no intervalo [1, 20]
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            matriz[i][j] = rand() % 20 + 1;
        }
    }

    // Imprimir matriz original
    printf("Matriz original:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    // Transformar matriz em matriz triangular inferior
    for (int i = 0; i < SIZE; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            matriz[i][j] = 0;
        }
    }

    // Imprimir matriz transformada
    printf("\nMatriz transformada:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*/

//-----------------STRINGS---------------------------

//exercicio 1
/*
#include <stdio.h>

int main() {
    char string[100];

    printf("Digite uma string: ");
    scanf("%s", string);

    printf("A string digitada é: %s\n", string);

    return 0;
}
*/

//exercicio 2
/*
#include <stdio.h>
#include <string.h>

int main() {
    char palavra[100];

    printf("Digite uma palavra: ");
    scanf("%s", palavra);

    printf("Palavra invertida: ");
    for (int i = strlen(palavra) - 1; i >= 0; i--) {
        printf("%c", palavra[i]);
    }
    printf("\n");

    return 0;
}
*/

//exercicio 3
/*
#include <stdio.h>
#include <string.h>

int main() {
    char palavra[100];

    printf("Digite uma palavra: ");
    scanf("%s", palavra);

    printf("Palavra invertida: ");
    for (int i = strlen(palavra) - 1; i >= 0; i--) {
        printf("%c", palavra[i]);
    }
    printf("\n");

    return 0;
}
*/

//exercicio 4
/*
#include <stdio.h>
#include <string.h>

int main() {
    char palavra[100];
    char caractere;
    int count = 0;

    printf("Digite uma palavra: ");
    scanf("%s", palavra);

    printf("Digite um caractere: ");
    scanf(" %c", &caractere);

    for (int i = 0; i < strlen(palavra); i++) {
        if (palavra[i] == 'a' || palavra[i] == 'e' || palavra[i] == 'i' || palavra[i] == 'o' || palavra[i] == 'u' ||
            palavra[i] == 'A' || palavra[i] == 'E' || palavra[i] == 'I' || palavra[i] == 'O' || palavra[i] == 'U') {
            count++;
            palavra[i] = caractere;
        }
    }

    printf("A palavra modificada é: %s\n", palavra);
    printf("O número de vogais na palavra é: %d\n", count);

    return 0;
}
*/

//exercicio 5
/*
#include <stdio.h>
#include <string.h>

int main() {
    char string[100];

    printf("Digite uma string em letras maiúsculas: ");
    scanf("%s", string);

    for (int i = 0; i < strlen(string); i++) {
        if (string[i] >= 'A' && string[i] <= 'Z') {
            string[i] += 32;
        }
    }

    printf("String convertida para minúsculas: %s\n", string);

    return 0;
}
*/

//exercicio 6
/*
#include <stdio.h>
#include <string.h>

int main() {
    char string[100];

    printf("Digite uma string: ");
    scanf("%s", string);

    for (int i = 0; i < strlen(string); i++) {
        if (string[i] >= 'a' && string[i] <= 'z') {
            string[i] -= 32;
        }
    }

    printf("String convertida para maiúsculas: %s\n", string);

    return 0;
}
*/

//exercicio 7
/*
#include <stdio.h>
#include <string.h>

int main() {
    char frase[100];
    char novoVetor[100];
    int j = 0;

    printf("Digite uma frase: ");
    fgets(frase, sizeof(frase), stdin);

    for (int i = 0; i < strlen(frase); i++) {
        if (frase[i] != ' ') {
            novoVetor[j] = frase[i];
            j++;
        }
    }

    novoVetor[j] = '\0';

    printf("Vetor resultante: %s\n", novoVetor);

    return 0;
}
*/

//exercicio 8
/*
#include <stdio.h>
#include <string.h>

int main() {
    char string[100];
    char l1, l2;

    printf("Digite uma string: ");
    fgets(string, sizeof(string), stdin);

    printf("Digite a letra a ser substituída: ");
    scanf("%c", &l1);

    getchar(); // Limpar o caractere de quebra de linha

    printf("Digite a letra substituta: ");
    scanf("%c", &l2);

    for (int i = 0; i < strlen(string); i++) {
        if (string[i] == l1) {
            string[i] = l2;
        }
    }

    printf("String resultante: %s\n", string);

    return 0;
}
*/

//exercicio 9

/*#include <stdio.h>
#include <string.h>

#define NUM_CARROS 5

int main() {
    char modelos[NUM_CARROS][100];
    float consumo[NUM_CARROS];

    // Preenchimento da matriz de string com os modelos de carros
    printf("Preencha a matriz de modelos de carros:\n");
    for (int i = 0; i < NUM_CARROS; i++) {
        printf("Modelo %d: ", i + 1);
        fgets(modelos[i], sizeof(modelos[i]), stdin);

        // Remover o caractere de quebra de linha do fgets
        modelos[i][strcspn(modelos[i], "\n")] = '\0';
    }

    // Preenchimento do vetor de consumo dos carros
    printf("\nPreencha o vetor de consumo dos carros:\n");
    for (int i = 0; i < NUM_CARROS; i++) {
        printf("Consumo do modelo %s (em km/l): ", modelos[i]);
        scanf("%f", &consumo[i]);

        getchar(); // Limpar o caractere de quebra de linha
    }

    // Encontrar o modelo mais econômico
    float menorConsumo = consumo[0];
    int indiceMenorConsumo = 0;
    for (int i = 1; i < NUM_CARROS; i++) {
        if (consumo[i] < menorConsumo) {
            menorConsumo = consumo[i];
            indiceMenorConsumo = i;
        }
    }

    printf("\nO modelo mais econômico é: %s\n", modelos[indiceMenorConsumo]);

    // Cálculo de quantos litros de combustível cada carro consome para percorrer 1000 km
    printf("\nConsumo dos carros para percorrer 1000 km:\n");
    for (int i = 0; i < NUM_CARROS; i++) {
        float litros = 1000.0 / consumo[i];
        printf("Modelo %s: %.2f litros\n", modelos[i], litros);
    }

    return 0;
}
*/

//exercicio 10
/*
#include <stdio.h>

int main() {
    char nomeMercadoria[100];
    float valorMercadoria, valorDesconto, valorTotal;

    printf("Digite o nome da mercadoria: ");
    fgets(nomeMercadoria, sizeof(nomeMercadoria), stdin);

    printf("Digite o valor da mercadoria: ");
    scanf("%f", &valorMercadoria);

    // Calcular o valor do desconto
    valorDesconto = 0.1 * valorMercadoria;
    
    // Calcular o valor a ser pago à vista
    valorTotal = valorMercadoria - valorDesconto;

    printf("\n--- Dados da compra ---\n");
    printf("Mercadoria: %s", nomeMercadoria);
    printf("Valor total: R$ %.2f\n", valorMercadoria);
    printf("Valor do desconto: R$ %.2f\n", valorDesconto);
    printf("Valor a ser pago à vista: R$ %.2f\n", valorTotal);

    return 0;
}
*/

//exercicio 11
/*
#include <stdio.h>
#include <string.h>

void imprimirSegmento(const char* string, int i, int j) {
    int tamanho = strlen(string);

    if (i < 0 || i >= tamanho || j < 0 || j >= tamanho || i > j) {
        printf("Segmento inválido\n");
        return;
    }

    for (int k = i; k <= j; k++) {
        printf("%c", string[k]);
    }

    printf("\n");
}

int main() {
    char string[100];
    int i, j;

    printf("Digite uma string: ");
    fgets(string, sizeof(string), stdin);
    string[strcspn(string, "\n")] = '\0'; // Remover o caractere de quebra de linha

    printf("Digite os valores de i e j: ");
    scanf("%d %d", &i, &j);

    imprimirSegmento(string, i, j);

    return 0;
}
*/

//exercicio 12
/*
#include <stdio.h>
#include <ctype.h>

#define DESLOCAMENTO 3

void codificarCesar(char* string) {
    for (int i = 0; string[i] != '\0'; i++) {
        if (isalpha(string[i])) {
            if (islower(string[i])) {
                string[i] = ((string[i] - 'a') + DESLOCAMENTO) % 26 + 'a';
            } else {
                string[i] = ((string[i] - 'A') + DESLOCAMENTO) % 26 + 'A';
            }
        }
    }
}

int main() {
    char string[100];

    printf("Digite uma string: ");
    fgets(string, sizeof(string), stdin);
    string[strcspn(string, "\n")] = '\0'; // Remover o caractere de quebra de linha

    codificarCesar(string);

    printf("Nova string codificada: %s\n", string);

    return 0;
}
*/

//exercicio 13
/*
#include <stdio.h>
#include <ctype.h>

#define DESLOCAMENTO 3

void codificarCesar(char* string) {
    for (int i = 0; string[i] != '\0'; i++) {
        if (isalpha(string[i])) {
            if (islower(string[i])) {
                string[i] = ((string[i] - 'a') + DESLOCAMENTO) % 26 + 'a';
            } else {
                string[i] = ((string[i] - 'A') + DESLOCAMENTO) % 26 + 'A';
            }
        }
    }
}

int main() {
    char string[100];

    printf("Digite uma string: ");
    fgets(string, sizeof(string), stdin);
    string[strcspn(string, "\n")] = '\0'; // Remover o caractere de quebra de linha

    codificarCesar(string);

    printf("Nova string codificada: %s\n", string);

    return 0;
}
*/
